'use strict';
//Modules and files
const jwt = require('jsonwebtoken');
const { JWT_SECRET } = require('../config/config');
const User = require('../models/users');

/*function to validate the token if it exists and if it 
matches the one generated by the server*/

const validationToken=() => {
    const token = req.header('x-token');
    if (!token) {

        return res.status(401).json({
            ok: false,
            msg: 'El Token es requerido'
        })
    }

}
const validationJWT = (req, res, next) => {

    const token = req.header('x-token');
    if (!token) {

        return res.status(401).json({
            ok: false,
            msg: 'El Token es requerido'
        })
    }
    try {
        const { _id } = jwt.verify(token, JWT_SECRET);
        req._id = _id;
        next();
    } catch (err) {

        return res.status(401).json({
            ok: false,
            msg: 'El Token no es valido'
        })

    }
}
const validationAdmin = async (req, res, next) => {
    const token = req.header('x-token');
    if (!token) {

        return res.status(401).json({
            ok: false,
            msg: 'El Token es requerido'
        })
    }

    const { _id } = jwt.verify(token, JWT_SECRET);
    req._id = _id;
    console.log("contenido de id" + _id)
    try {
        const userDB = await User.findById(_id)
        if (!userDB) {
            return res.status(404).json({
                ok: false,
                msg: 'El usuario no existe'
            })
        }
        if (userDB.role !== 'ADMIN') {
            return res.status(403).json({
                ok: false,
                msg: 'No tienes privilegios de administrador'
            })
        }
        next();
    } catch (error) {
        console.log(error)
        return res.status(500).json({
            ok: false,
            msg: 'Ocurrio un problema con el servidor'
        })

    }
}
const validationSameUser = async (req, res, next) => {
    const token = req.header('x-token');
    if (!token) {

        return res.status(401).json({
            ok: false,
            msg: 'El Token es requerido'
        })
    }

    const { _id } = jwt.verify(token, JWT_SECRET);
    req._id = _id;
   const id_act= req.params.id
   console.log("el otor id"+id_act)

    try {
        const userDB = await User.findById(_id)
        if (!userDB) {
            return res.status(404).json({
                ok: false,
                msg: 'El usuario no existe'
            })
        }
        if (userDB.role == 'ADMIN' || id_act === _id) {
            next();
        }
        else{
            return res.status(403).json({
                ok: false,
                msg: 'No tienes privilegios de administrador'
            })
        }

    } catch (error) {
        console.log(error)
        return res.status(500).json({
            ok: false,
            msg: 'Ocurrio un problema con el servidor'
        })

    }
}


//Exporting functions for the use in other files
module.exports = {
    validationJWT,
    validationAdmin,
    validationSameUser
}